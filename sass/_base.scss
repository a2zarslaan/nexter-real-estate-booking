// COLOR VARIABLES
$color-primary: #c69963;
$color-primary-dark: #B28451;

$color-secondary: #101d2c;

$color-grey-light-1: #f9f7f6;
$color-grey-light-2: #aaa;

$color-grey-dark-1: #54483A;
$color-grey-dark-2: #6D5D4B;

// FONT VARIABLES
$font-primary: 'Nunito', sans-serif; 
$font-display: 'Josefin Sans', sans-serif;



//RESPONSIVE BREAKPOINTS
$bp-largest: 75em;   //We are using em here for reasons explained in previous lectures. 75em = 1200/16px
$bp-large: 62.5em; //1000/16px = 62.5em
$bp-medium: 50em; //800/16px = 50em
$bp-small: 37.5em; //600/16px = 37.5 em


//global reset
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  box-sizing: border-box;
  font-size: 62.5%;  //1rem = 10px, 10px/16px = 62.5%

  //responsive setting, max-width because this is a desktop first design
  @media only screen and (max-width: $bp-largest){
    font-size: 50%;  //1rem = 8px, 8/16px = 50%
  }
}

body {
  font-family: $font-primary;
  color: $color-grey-dark-2;
  font-weight: 300; //can use 300 as it is included when the font is imported above
  line-height: 1.6;
}


//building grids
.container {
  display: grid;

  //min-content means the grid item will be at least as wide as the content's width, if the screen is smaller, the item will shift to the new row. So in the following line of code we're assigning properties of individual rows in the layout 
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content); //3 consecutive rows will have min-content hence repeat

  //we want the width of these columns to be at least as wide as the min content, and maximum 14rem wide. This will ensure respinsive behavior as screen size is reduced. Sidebar is 8rem fixed because it always stays at the same spot. We're using fractional units to the left and right of the 8 columns in the middle to ensure that they are in the middle of the screen. Further, minmax(6rem, 1fr) is used to provide a minimum width of 60 pixels to the column. This is because these fractional units here are working as a margin between the content and the end of the page, so even when as screen size is reduced they do not disappear.
  grid-template-columns: [sidebar-start] 8rem [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem)[col-end]) [center-end] minmax(6rem, 1fr) [full-end]; //1140/8 = 140px

  @media only screen and (max-width: $bp-large){
    //we'll add a new row and remove the first column
    grid-template-rows: 6rem 80vh min-content 40vw repeat(3, min-content);
    grid-template-columns: [full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem)[col-end]) [center-end] minmax(6rem, 1fr) [full-end]; 
  }  
  
  
  @media only screen and (max-width: $bp-medium){
    //we'll add a new row here too. So the first row will be the sidebar, second will be the the header, after that will be a new row for realtors, everything after will remain the same. Header is 94vh because we want it to cover the whole full screen in this screen size, and there is a 6rem high sidebar as well, so the total needs to be 100vh-6rem. These cannot be directly subtracted, so we'll use the calc function
    //grid-template-rows: 6rem calc(100vh - 6rem) min-content min-content 40vh repeat(3, min-content);

    //later we reduced the line above, as the automatic palcement algorithm will take care of rest of the elements according to their size.
    grid-template-rows: 6rem calc(100vh - 6rem);
  }
}